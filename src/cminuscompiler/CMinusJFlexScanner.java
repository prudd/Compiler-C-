/* The following code was generated by JFlex 1.4.3 on 2/14/13 10:50 PM */

/* C- Lexer Specification */

package cminuscompiler;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/14/13 10:50 PM from the specification file
 * <tt>F:/Pauls Various Works/School Files/CIS/CS 3510/Projects/Project 2/cminus.flex</tt>
 */
public class CMinusJFlexScanner implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\43\6\0"+
    "\1\30\1\31\1\5\1\44\1\37\1\45\1\0\1\4\1\10\1\47"+
    "\1\46\1\53\1\50\1\11\1\54\1\51\1\52\1\11\1\0\1\36"+
    "\1\42\1\40\1\41\2\0\32\6\1\34\1\0\1\35\3\0\3\6"+
    "\1\25\1\12\1\16\1\6\1\27\1\15\2\6\1\13\1\6\1\17"+
    "\1\24\2\6\1\21\1\14\1\20\1\22\1\23\1\26\3\6\1\32"+
    "\1\0\1\33\54\0\1\6\12\0\1\6\4\0\1\6\5\0\27\6"+
    "\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6"+
    "\1\0\1\6\201\0\5\6\1\0\2\6\2\0\4\6\10\0\1\6"+
    "\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6"+
    "\10\0\236\6\11\0\46\6\2\0\1\6\7\0\47\6\110\0\33\6"+
    "\5\0\3\6\55\0\53\6\25\0\12\7\4\0\2\6\1\0\143\6"+
    "\1\0\1\6\17\0\2\6\7\0\2\6\12\7\3\6\2\0\1\6"+
    "\20\0\1\6\1\0\36\6\35\0\131\6\13\0\1\6\16\0\12\7"+
    "\41\6\11\0\2\6\4\0\1\6\5\0\26\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\27\0\31\6\253\0\66\6\3\0\1\6\22\0"+
    "\1\6\7\0\12\6\4\0\12\7\1\0\7\6\1\0\7\6\5\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0"+
    "\4\6\3\0\1\6\20\0\1\6\15\0\2\6\1\0\3\6\4\0"+
    "\12\7\2\6\23\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\37\0\4\6\1\0\1\6"+
    "\7\0\12\7\2\0\3\6\20\0\11\6\1\0\3\6\1\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\3\0\1\6\22\0\1\6"+
    "\17\0\2\6\4\0\12\7\25\0\10\6\2\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\3\0\1\6\36\0\2\6"+
    "\1\0\3\6\4\0\12\7\1\0\1\6\21\0\1\6\1\0\6\6"+
    "\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6"+
    "\3\0\2\6\3\0\3\6\3\0\14\6\26\0\1\6\25\0\12\7"+
    "\25\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\3\0\1\6\32\0\2\6\6\0\2\6\4\0\12\7\25\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6"+
    "\40\0\1\6\1\0\2\6\4\0\12\7\1\0\2\6\22\0\10\6"+
    "\1\0\3\6\1\0\51\6\2\0\1\6\20\0\1\6\21\0\2\6"+
    "\4\0\12\7\12\0\6\6\5\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\72\0\60\6\1\0\2\6\14\0\7\6"+
    "\11\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6"+
    "\1\0\1\6\2\0\2\6\1\0\4\6\1\0\2\6\11\0\1\6"+
    "\2\0\5\6\1\0\1\6\11\0\12\7\2\0\2\6\42\0\1\6"+
    "\37\0\12\7\26\0\10\6\1\0\44\6\33\0\5\6\163\0\53\6"+
    "\24\0\1\6\12\7\6\0\6\6\4\0\4\6\3\0\1\6\3\0"+
    "\2\6\7\0\3\6\4\0\15\6\14\0\1\6\1\0\12\7\6\0"+
    "\46\6\12\0\53\6\1\0\1\6\3\0\u0149\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0"+
    "\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\17\6\1\0\71\6\1\0\4\6\2\0\103\6\45\0\20\6\20\0"+
    "\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\25\0"+
    "\15\6\1\0\4\6\16\0\22\6\16\0\22\6\16\0\15\6\1\0"+
    "\3\6\17\0\64\6\43\0\1\6\4\0\1\6\3\0\12\7\46\0"+
    "\12\7\6\0\130\6\10\0\51\6\1\0\1\6\5\0\106\6\12\0"+
    "\35\6\51\0\12\7\36\6\2\0\5\6\13\0\54\6\25\0\7\6"+
    "\10\0\12\7\46\0\27\6\11\0\65\6\53\0\12\7\6\0\12\7"+
    "\15\0\1\6\135\0\57\6\21\0\7\6\4\0\12\7\51\0\36\6"+
    "\15\0\2\6\12\7\6\0\46\6\32\0\44\6\34\0\12\7\3\0"+
    "\3\6\12\7\44\6\153\0\4\6\1\0\4\6\16\0\300\6\100\0"+
    "\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0"+
    "\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0"+
    "\6\6\4\0\15\6\5\0\3\6\1\0\7\6\164\0\1\6\15\0"+
    "\1\6\20\0\15\6\145\0\1\6\4\0\1\6\2\0\12\6\1\0"+
    "\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\64\0"+
    "\2\6\u0a7b\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\21\0"+
    "\46\6\12\0\66\6\11\0\1\6\20\0\27\6\11\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\120\0\1\6\u01d5\0\2\6\52\0\5\6\5\0"+
    "\2\6\4\0\126\6\6\0\3\6\1\0\132\6\1\0\4\6\5\0"+
    "\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0"+
    "\u51cc\6\64\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7"+
    "\2\6\24\0\57\6\20\0\31\6\10\0\106\6\61\0\11\6\2\0"+
    "\147\6\2\0\4\6\1\0\2\6\16\0\12\6\120\0\10\6\1\0"+
    "\3\6\1\0\4\6\1\0\27\6\35\0\64\6\16\0\62\6\34\0"+
    "\12\7\30\0\6\6\3\0\1\6\4\0\12\7\34\6\12\0\27\6"+
    "\31\0\35\6\7\0\57\6\34\0\1\6\12\7\46\0\51\6\27\0"+
    "\3\6\1\0\10\6\4\0\12\7\6\0\27\6\3\0\1\6\5\0"+
    "\60\6\1\0\1\6\3\0\2\6\2\0\5\6\2\0\1\6\1\0"+
    "\1\6\30\0\3\6\43\0\6\6\2\0\6\6\2\0\6\6\11\0"+
    "\7\6\1\0\7\6\221\0\43\6\15\0\12\7\6\0\u2ba4\6\14\0"+
    "\27\6\4\0\61\6\u2104\0\u012e\6\2\0\76\6\2\0\152\6\46\0"+
    "\7\6\14\0\5\6\5\0\1\6\1\0\12\6\1\0\15\6\1\0"+
    "\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0"+
    "\u016b\6\22\0\100\6\2\0\66\6\50\0\14\6\164\0\5\6\1\0"+
    "\207\6\23\0\12\7\7\0\32\6\6\0\32\6\13\0\131\6\3\0"+
    "\6\6\2\0\6\6\2\0\6\6\2\0\3\6\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\1\2\6"+
    "\5\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\1\1\22\1\23\1\0"+
    "\1\24\1\25\1\0\1\5\1\26\4\5\1\27\1\30"+
    "\1\31\1\32\3\0\1\5\1\33\3\5\2\0\1\34"+
    "\1\5\1\35\1\5\1\0\1\5\1\36\1\0\1\37"+
    "\5\0\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\55\0\207\0\55\0\264\0\341"+
    "\0\341\0\u010e\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\55"+
    "\0\55\0\55\0\55\0\55\0\55\0\55\0\55\0\u021c"+
    "\0\u0249\0\u0276\0\u02a3\0\55\0\u02d0\0\u02fd\0\u032a\0\u0357"+
    "\0\341\0\u0384\0\264\0\u03b1\0\u03de\0\u040b\0\u0438\0\55"+
    "\0\55\0\55\0\55\0\u0465\0\u0492\0\u04bf\0\u04ec\0\264"+
    "\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\264\0\u05fa\0\264"+
    "\0\u0627\0\u0654\0\u0681\0\264\0\u06ae\0\264\0\u06db\0\u0708"+
    "\0\u0735\0\u0762\0\u078f\0\55";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\7\1\14\3\7\1\15\1\7\1\16"+
    "\2\7\1\17\1\7\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\7\12\57\0\1\4\57\0\1\36\55\0\1\7"+
    "\3\37\16\7\16\0\7\37\6\0\1\40\3\41\16\40"+
    "\16\0\7\41\6\0\1\40\1\41\2\12\16\40\16\0"+
    "\7\12\6\0\1\7\3\37\1\7\1\42\14\7\16\0"+
    "\7\37\6\0\1\7\3\37\4\7\1\43\1\44\10\7"+
    "\16\0\7\37\6\0\1\7\3\37\1\45\15\7\16\0"+
    "\7\37\6\0\1\7\3\37\12\7\1\46\3\7\16\0"+
    "\7\37\6\0\1\7\3\37\15\7\1\47\16\0\7\37"+
    "\40\0\1\50\54\0\1\51\54\0\1\52\54\0\1\53"+
    "\62\0\1\54\6\0\5\55\1\56\47\55\7\0\3\37"+
    "\34\0\7\37\6\0\1\40\3\0\16\40\33\0\1\7"+
    "\3\37\2\7\1\57\13\7\16\0\7\37\6\0\1\7"+
    "\3\37\6\7\1\60\7\7\16\0\7\37\6\0\1\7"+
    "\3\37\6\7\1\61\7\7\16\0\7\37\6\0\1\7"+
    "\3\37\3\7\1\62\12\7\16\0\7\37\6\0\1\7"+
    "\3\37\3\7\1\63\12\7\16\0\7\37\47\0\1\64"+
    "\5\0\5\55\1\65\47\55\4\0\1\4\1\56\55\0"+
    "\1\7\3\37\1\66\15\7\16\0\7\37\6\0\1\7"+
    "\3\37\10\7\1\67\5\7\16\0\7\37\6\0\1\7"+
    "\3\37\13\7\1\70\2\7\16\0\7\37\6\0\1\7"+
    "\3\37\1\7\1\71\14\7\16\0\7\37\50\0\1\72"+
    "\4\0\4\55\1\4\1\65\47\55\6\0\1\7\3\37"+
    "\7\7\1\73\6\7\16\0\7\37\6\0\1\7\3\37"+
    "\1\74\15\7\16\0\7\37\51\0\1\75\11\0\1\7"+
    "\3\37\5\7\1\76\10\7\16\0\7\37\50\0\1\77"+
    "\56\0\1\100\55\0\1\101\55\0\1\102\50\0\1\103"+
    "\56\0\1\104\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1980];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\11\1\10\11"+
    "\4\1\1\11\1\1\1\0\2\1\1\0\6\1\4\11"+
    "\3\0\5\1\2\0\4\1\1\0\2\1\1\0\1\1"+
    "\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    Token token;

    private Token genToken(Token.TokenType type, Object data) {
        Token newToken = new Token();
        newToken.setType(type);
        newToken.setData(data);
        this.token = newToken;
        return newToken;
    }

    private Token genToken(Token.TokenType type, Token.ErrorTokenType error) {
        Token newToken = new Token();
        newToken.setType(type);
        newToken.setData(null);
        newToken.setError(error);
        this.token = newToken;
        return newToken;
    }

    public Token viewToken() {
        return this.token;
    }
    
    public CMinusJFlexScanner(String source) throws FileNotFoundException {
        this.zzReader = new BufferedReader(new FileReader(source));
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CMinusJFlexScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CMinusJFlexScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1676) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token getToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { return genToken(Token.TokenType.SUBTRACT_TOKEN, "-");
          }
        case 33: break;
        case 14: 
          { return genToken(Token.TokenType.SEQUENCING_TOKEN, ",");
          }
        case 34: break;
        case 30: 
          { return genToken(Token.TokenType.WHILE_TOKEN, "while");
          }
        case 35: break;
        case 23: 
          { return genToken(Token.TokenType.EQUAL_TOKEN, "==");
          }
        case 36: break;
        case 9: 
          { return genToken(Token.TokenType.LBRACE_TOKEN, "{");
          }
        case 37: break;
        case 18: 
          { return genToken(Token.TokenType.ADD_TOKEN, "+");
          }
        case 38: break;
        case 17: 
          { return genToken(Token.TokenType.LE_TOKEN, "<");
          }
        case 39: break;
        case 5: 
          { return genToken(Token.TokenType.ID_TOKEN, yytext());
          }
        case 40: break;
        case 4: 
          { return genToken(Token.TokenType.MULTIPLY_TOKEN, "*");
          }
        case 41: break;
        case 15: 
          { return genToken(Token.TokenType.ASSIGN_TOKEN, "=");
          }
        case 42: break;
        case 8: 
          { return genToken(Token.TokenType.RPAREN_TOKEN, ")");
          }
        case 43: break;
        case 25: 
          { return genToken(Token.TokenType.LEQ_TOKEN, "<=");
          }
        case 44: break;
        case 26: 
          { return genToken(Token.TokenType.NOT_EQUAL_TOKEN, "!=");
          }
        case 45: break;
        case 31: 
          { return genToken(Token.TokenType.RETURN_TOKEN, "return");
          }
        case 46: break;
        case 11: 
          { return genToken(Token.TokenType.LBRACKET_TOKEN, "[");
          }
        case 47: break;
        case 29: 
          { return genToken(Token.TokenType.VOID_TOKEN, "void");
          }
        case 48: break;
        case 21: 
          { return genToken(Token.TokenType.ERROR_TOKEN, Token.ErrorTokenType.INVALID_INTEGER);
          }
        case 49: break;
        case 27: 
          { return genToken(Token.TokenType.INT_TOKEN, "int");
          }
        case 50: break;
        case 3: 
          { return genToken(Token.TokenType.DIVIDE_TOKEN, "/");
          }
        case 51: break;
        case 16: 
          { return genToken(Token.TokenType.GE_TOKEN, ">");
          }
        case 52: break;
        case 12: 
          { return genToken(Token.TokenType.RBRACKET_TOKEN, "]");
          }
        case 53: break;
        case 32: 
          { return genToken(Token.TokenType.NUM_TOKEN, new Integer(Integer.MIN_VALUE));
          }
        case 54: break;
        case 28: 
          { return genToken(Token.TokenType.ELSE_TOKEN, "else");
          }
        case 55: break;
        case 20: 
          { return genToken(Token.TokenType.ERROR_TOKEN, Token.ErrorTokenType.INVALID_IDENTIFIER);
          }
        case 56: break;
        case 7: 
          { return genToken(Token.TokenType.LPAREN_TOKEN, "(");
          }
        case 57: break;
        case 10: 
          { return genToken(Token.TokenType.RBRACE_TOKEN, "}");
          }
        case 58: break;
        case 22: 
          { return genToken(Token.TokenType.IF_TOKEN, "if");
          }
        case 59: break;
        case 1: 
          { return genToken(Token.TokenType.ERROR_TOKEN, Token.ErrorTokenType.UNSPECIFIED_ERROR);
          }
        case 60: break;
        case 24: 
          { return genToken(Token.TokenType.GEQ_TOKEN, ">=");
          }
        case 61: break;
        case 13: 
          { return genToken(Token.TokenType.END_STATEMENT_TOKEN, ";");
          }
        case 62: break;
        case 2: 
          { /* ignore */
          }
        case 63: break;
        case 6: 
          { return genToken(Token.TokenType.NUM_TOKEN, new Integer(yytext()));
          }
        case 64: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return genToken(Token.TokenType.EOF_TOKEN, null);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
